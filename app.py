import google.generativeai as genai
import os
import sys
from flask import Flask, request, render_template_string

app = Flask(__name__)

# --- C·∫•u h√¨nh Kh√≥a API Gemini c·ªßa b·∫°n ---
# ƒê·∫£m b·∫£o kh√≥a API ƒë∆∞·ª£c thi·∫øt l·∫≠p trong bi·∫øn m√¥i tr∆∞·ªùng tr√™n m√°y ch·ªß
# Ho·∫∑c b·∫°n s·∫Ω c·∫ßn c∆° ch·∫ø an to√†n kh√°c ƒë·ªÉ qu·∫£n l√Ω n√≥
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")

if not GOOGLE_API_KEY:
    print("L·ªói: Kh√¥ng t√¨m th·∫•y kh√≥a API GOOGLE_API_KEY trong bi·∫øn m√¥i tr∆∞·ªùng.")
    sys.exit(1) # Tho√°t n·∫øu kh√¥ng c√≥ kh√≥a API ƒë·ªÉ tr√°nh l·ªói khi deploy

genai.configure(api_key=GOOGLE_API_KEY)

# --- Ch·ªçn v√† Kh·ªüi t·∫°o M√¥ h√¨nh Gemini ---
# Ch√∫ng ta v·∫´n s·∫Ω c·ªë g·∫Øng s·ª≠ d·ª•ng gemini-pro
MODEL_NAME = 'models/gemini-2.5-flash'
model = None # Kh·ªüi t·∫°o bi·∫øn model

try:
    # Ki·ªÉm tra c√°c m√¥ h√¨nh c√≥ s·∫µn n·∫øu MODEL_NAME kh√¥ng ho·∫°t ƒë·ªông
    # Ch·ªâ th·ª±c hi·ªán ki·ªÉm tra n√†y khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông
    found_model = False
    for m in genai.list_models():
        if m.name == MODEL_NAME and 'generateContent' in m.supported_generation_methods:
            found_model = True
            break
    
    if found_model:
        model = genai.GenerativeModel(MODEL_NAME)
    else:
        # N·∫øu gemini-pro kh√¥ng c√≥, h√£y th·ª≠ t√¨m m√¥ h√¨nh kh√°c c√≥ th·ªÉ s·ª≠ d·ª•ng
        for m in genai.list_models():
            if 'generateContent' in m.supported_generation_methods:
                MODEL_NAME = m.name # C·∫≠p nh·∫≠t t√™n m√¥ h√¨nh
                model = genai.GenerativeModel(MODEL_NAME)
                print(f"C·∫£nh b√°o: '{MODEL_NAME}' kh√¥ng kh·∫£ d·ª•ng, s·ª≠ d·ª•ng '{MODEL_NAME}' thay th·∫ø.")
                break
        if model is None:
            raise Exception("Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh Gemini n√†o ph√π h·ª£p h·ªó tr·ª£ 'generateContent'.")

except Exception as e:
    print(f"L·ªói khi kh·ªüi t·∫°o m√¥ h√¨nh Gemini: {e}")
    sys.exit(1)

# L·ªãch s·ª≠ tr√≤ chuy·ªán cho phi√™n hi·ªán t·∫°i (ƒë∆°n gi·∫£n, kh√¥ng l∆∞u tr·ªØ gi·ªØa c√°c request)
# ƒê·ªëi v·ªõi chatbot tr·ª±c tuy·∫øn, b·∫°n th∆∞·ªùng c·∫ßn m·ªôt c∆° ch·∫ø l∆∞u tr·ªØ b·ªÅn v·ªØng h∆°n (v√≠ d·ª•: c∆° s·ªü d·ªØ li·ªáu)
# ho·∫∑c qu·∫£n l√Ω l·ªãch s·ª≠ theo session c·ªßa ng∆∞·ªùi d√πng. V·ªõi v√≠ d·ª• n√†y, m·ªói l·∫ßn g·ª≠i tin nh·∫Øn l√† m·ªôt request m·ªõi.
# V√¨ v·∫≠y, ch√∫ng ta s·∫Ω b·∫Øt ƒë·∫ßu m·ªôt phi√™n tr√≤ chuy·ªán m·ªõi cho m·ªói tin nh·∫Øn ƒë·ªÉ gi·ªØ v√≠ d·ª• ƒë∆°n gi·∫£n.

# HTML cho giao di·ªán web ƒë∆°n gi·∫£n
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chatbot TinhocDCT c·ªßa b·∫°n</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f4f4f4; color: #333; }
        .chat-container { max-width: 600px; margin: auto; background-color: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
        .message-box { height: 300px; overflow-y: scroll; border: 1px solid #ddd; padding: 10px; margin-bottom: 15px; border-radius: 4px; background-color: #e9e9e9; }
        .user-message { text-align: right; color: #007bff; }
        .bot-message { text-align: left; color: #28a745; }
        input[type="text"] { width: calc(100% - 70px); padding: 10px; border: 1px solid #ddd; border-radius: 4px; margin-right: 10px; }
        button { padding: 10px 15px; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; }
        button:hover { background-color: #0056b3; }
    </style>
</head>
<body>
    <div class="chat-container">
        <table>
            <tr>
                <td><img src="/static/logo.png" alt="Bi·ªÉu t∆∞·ª£ng Robot" style="width: 100px; height: auto; margin-bottom: 10px;"></td>
                <td><h1>Chatbot TinhocDCT</h1></td>
            </tr>
        </table>
        
        <div class="message-box" id="messageBox">
            <div class="bot-message"><strong>Chatbot:</strong> Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?</div>
        </div>
        <form id="chatForm" onsubmit="sendMessage(event)">
            <input type="text" id="userInput" placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n..." autocomplete="off">
            <button type="submit">G·ª≠i</button>
        </form>
    </div>

    <script>
        // L·∫•y l·ªãch s·ª≠ tin nh·∫Øn t·ª´ Local Storage ho·∫∑c kh·ªüi t·∫°o n·∫øu ch∆∞a c√≥
        let chatHistory = JSON.parse(localStorage.getItem('geminiChatHistory')) || [];

        // H√†m hi·ªÉn th·ªã tin nh·∫Øn trong h·ªôp chat
        function displayMessage(sender, message) {
            const messageBox = document.getElementById('messageBox');
            const msgDiv = document.createElement('div');
            msgDiv.classList.add(sender === 'user' ? 'user-message' : 'bot-message');
            msgDiv.innerHTML = `<strong>${sender === 'user' ? 'B·∫°n' : 'ü§ñChatbot TinhocDCT'}:</strong> ${message}`;
            messageBox.appendChild(msgDiv);
            messageBox.scrollTop = messageBox.scrollHeight; // Cu·ªôn xu·ªëng d∆∞·ªõi c√πng
        }

        // T·∫£i l·∫°i l·ªãch s·ª≠ khi trang ƒë∆∞·ª£c t·∫£i
        window.onload = function() {
            chatHistory.forEach(msg => displayMessage(msg.sender, msg.message));
        };

        async function sendMessage(event) {
            event.preventDefault(); // NgƒÉn ch·∫∑n form submit truy·ªÅn th·ªëng
            const userInput = document.getElementById('userInput');
            const message = userInput.value.trim();

            if (message === '') return;

            displayMessage('user', message);
            chatHistory.push({ sender: 'user', message: message });
            localStorage.setItem('geminiChatHistory', JSON.stringify(chatHistory));

            userInput.value = ''; // X√≥a input

            // G·ª≠i tin nh·∫Øn ƒë·∫øn Flask backend
            try {
                const response = await fetch('/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message: message, history: chatHistory }), // G·ª≠i c·∫£ l·ªãch s·ª≠
                });
                const data = await response.json();
                displayMessage('bot', data.response);
                chatHistory.push({ sender: 'bot', message: data.response });
                localStorage.setItem('geminiChatHistory', JSON.stringify(chatHistory));

            } catch (error) {
                console.error('L·ªói khi g·ª≠i tin nh·∫Øn:', error);
                displayMessage('bot', 'Xin l·ªói, ƒë√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i.');
            }
        }
    </script>
</body>
</html>
"""

@app.route('/')
def home():
    return render_template_string(HTML_TEMPLATE)

@app.route('/chat', methods=['POST'])
def chat():
    user_message = request.json.get('message')
    # L·∫•y l·ªãch s·ª≠ t·ª´ frontend ƒë·ªÉ duy tr√¨ ng·ªØ c·∫£nh
    # Chuy·ªÉn ƒë·ªïi l·ªãch s·ª≠ t·ª´ JSON sang ƒë·ªãnh d·∫°ng ph√π h·ª£p cho Gemini
    # ƒê·∫£m b·∫£o 'role' v√† 'parts' ƒë√∫ng ƒë·ªãnh d·∫°ng
    history_from_frontend = request.json.get('history', [])
    gemini_history = []
    for msg in history_from_frontend:
        role = 'user' if msg['sender'] == 'user' else 'model'
        gemini_history.append({'role': role, 'parts': [{'text': msg['message']}]})
    
    # B·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán v·ªõi l·ªãch s·ª≠ ƒë∆∞·ª£c cung c·∫•p
    chat_session = model.start_chat(history=gemini_history)

    try:
        response = chat_session.send_message(user_message)
        return {'response': response.text}
    except Exception as e:
        return {'response': f"Xin l·ªói, ƒë√£ x·∫£y ra l·ªói t·ª´ API: {e}"}, 500

if __name__ == '__main__':
    # Ch·∫°y ·ª©ng d·ª•ng Flask tr√™n m√°y t√≠nh c·ªßa b·∫°n ƒë·ªÉ ki·ªÉm tra
    app.run(debug=True, host='0.0.0.0', port=5000)
